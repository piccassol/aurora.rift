async function generateVideo(prompt, duration = 4, resolution = "1920x1080", image = null) {
  try {
    const formData = new FormData();
    formData.append("prompt", prompt);
    formData.append("duration", duration);
    formData.append("resolution", resolution);
    if (image) {
      formData.append("image", image); // Assumes API supports image input for continuation
    }

    const response = await fetch("/api/generate_video", {
      method: "POST",
      body: formData, // Use FormData to handle image uploads
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.statusText}`);
    }

    const data = await response.json();
    if (!data.video_url) {
      throw new Error("No video URL returned from API");
    }

    return data.video_url;
  } catch (error) {
    console.error("Video generation failed:", error);
    throw error;
  }
}

// Optional: Function to fetch and extract last frame (client-side, if needed)
async function extractLastFrame(videoUrl) {
  const video = document.createElement("video");
  video.src = videoUrl;
  await new Promise((resolve) => {
    video.onloadedmetadata = () => {
      video.currentTime = video.duration;
    };
    video.onseeked = () => resolve();
  });

  const canvas = document.createElement("canvas");
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  canvas.getContext("2d").drawImage(video, 0, 0);
  return canvas.toDataURL("image/png");
}

export { generateVideo, extractLastFrame };