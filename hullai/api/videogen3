async function generateVideo(prompt, duration = 4, resolution = "1920x1080", image = null) {
  try {
    const formData = new FormData();
    formData.append("prompt", prompt);
    formData.append("duration", duration);
    formData.append("resolution", resolution);
    if (image) {
      formData.append("image", image); // Image for continuation
    }

    const response = await fetch("/api/generate_video", {
      method: "POST",
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.statusText}`);
    }

    const data = await response.json();
    if (!data.video_url) {
      throw new Error("No video URL returned");
    }

    return data.video_url;
  } catch (error) {
    console.error("Video generation failed:", error);
    throw error;
  }
}

async function extractLastFrame(videoUrl) {
  try {
    const video = document.createElement("video");
    video.src = videoUrl;
    await new Promise((resolve) => {
      video.onloadedmetadata = () => {
        video.currentTime = video.duration;
      };
      video.onseeked = () => resolve();
    });

    const canvas = document.createElement("canvas");
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext("2d").drawImage(video, 0, 0);
    const dataUrl = canvas.toDataURL("image/png");
    const response = await fetch(dataUrl);
    return await response.blob();
  } catch (error) {
    console.error("Frame extraction failed:", error);
    throw error;
  }
}

export { generateVideo, extractLastFrame };